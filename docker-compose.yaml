name: microservices-spring

include:
  - ./resource/docker-compose.yaml
  - ./web/docker-compose.yaml

services:
  authorization-server:
    build: ./authorization-server
    network_mode: host
    restart: unless-stopped
    pull_policy: always
    healthcheck:
      test: ["CMD-SHELL", "curl --fail --silent localhost:9000/actuator/health | grep UP || exit 1"]
      interval: 45s
      retries: 5
      start_period: 30s
      timeout: 10s
    environment:
      AUTH_PORT: ${AUTH_PORT}
      ADMIN_USERNAME: ${ADMIN_USERNAME}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      RESOURCE_CLIENT_ID: ${RESOURCE_CLIENT_ID}
      RESOURCE_SECRET_ID: ${RESOURCE_SECRET_ID}
      BFF_CLIENT_ID: ${BFF_CLIENT_ID}
      BFF_SECRET_ID: ${BFF_SECRET_ID}
      AUTH_DB_HOST: ${AUTH_DB_HOST}
      AUTH_DB_PORT: ${AUTH_DB_PORT}
      AUTH_DB_NAME: ${AUTH_DB_NAME}
      AUTH_DB_USER: ${AUTH_DB_USER}
      AUTH_DB_PASSWORD: ${AUTH_DB_PASSWORD}
      WEB_HOST: ${HUB_URI}
      GATEWAY_HOST: ${GATEWAY_URI}
    depends_on:
      postgresql_auth:
        condition: service_healthy

  discovery-service:
    build: ./discovery-service
    network_mode: host
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl --fail --silent localhost:8761/actuator/health | grep UP || exit 1"]
      interval: 45s
      retries: 5
      start_period: 30s
      timeout: 10s
    environment:
      EUREKA_USER: ${EUREKA_USER}
      EUREKA_PASS: ${EUREKA_PASS}
      EUREKA_HOST: ${EUREKA_HOST}
      EUREKA_PORT: ${EUREKA_PORT}
      AUTH_URI: ${AUTH_URI}
    depends_on:
      authorization-server:
        condition: service_healthy

  oauth2-client-gateway:
    build: ./oauth2-client-gateway
    network_mode: host
    restart: always
    pull_policy: always
    environment:
      GATEWAY_PORT: ${GATEWAY_PORT}
      BFF_CLIENT_ID: ${BFF_CLIENT_ID}
      BFF_SECRET_ID: ${BFF_SECRET_ID}
      RESOURCE_CLIENT_ID: ${RESOURCE_CLIENT_ID}
      RESOURCE_SECRET_ID: ${RESOURCE_SECRET_ID}
      EUREKA_PROTOCOL: ${EUREKA_PROTOCOL}
      EUREKA_HOST: ${EUREKA_HOST}
      EUREKA_PORT: ${EUREKA_PORT}
      EUREKA_USER: ${EUREKA_USER}
      EUREKA_PASS: ${EUREKA_PASS}
      WEB_HOST: ${HUB_URI}
      AUTHORIZATION_HOST: ${AUTH_URI}
    depends_on:
      spring-graphql:
        condition: service_healthy

  postgresql_auth:
    image: postgres:17-alpine3.19
    network_mode: host
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    hostname: ${AUTH_DB_HOST}
    environment:
      POSTGRES_DB: ${AUTH_DB_NAME}
      PGPORT: ${AUTH_DB_PORT}
      POSTGRES_USER: ${AUTH_DB_USER}
      POSTGRES_PASSWORD: ${AUTH_DB_PASSWORD}
      POSTGRES_ROOT_PASSWORD: ${AUTH_DB_ROOT_PASSWORD}
    volumes:
      - vl-postgres-authdata:/var/lib/postgresql/data

networks:
  default:
    name: nt-microservices-spring

volumes:
  vl-postgres-authdata: